/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface NftSaleInterface extends utils.Interface {
  functions: {
    "buyWithToken(address,address)": FunctionFragment;
    "depositedCurrencies(uint256)": FunctionFragment;
    "depositedCurrenciesMap(address)": FunctionFragment;
    "getDepositedCurrencies()": FunctionFragment;
    "getSupportedCurrencies()": FunctionFragment;
    "initialize(address[],address,address,uint256)": FunctionFragment;
    "initialized()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "nftPrice()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeWhitelistedToken(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportedCurrencies(uint256)": FunctionFragment;
    "tokenIsWhitelisted(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatePrice(uint256)": FunctionFragment;
    "upgradeContract(address)": FunctionFragment;
    "whitelistTokens(address[])": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "buyWithToken"
      | "depositedCurrencies"
      | "depositedCurrenciesMap"
      | "getDepositedCurrencies"
      | "getSupportedCurrencies"
      | "initialize"
      | "initialized"
      | "nftAddress"
      | "nftPrice"
      | "owner"
      | "removeWhitelistedToken"
      | "renounceOwnership"
      | "supportedCurrencies"
      | "tokenIsWhitelisted"
      | "transferOwnership"
      | "updatePrice"
      | "upgradeContract"
      | "whitelistTokens"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyWithToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedCurrencies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositedCurrenciesMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedCurrencies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string[], string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nftPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportedCurrencies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIsWhitelisted",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistTokens",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "buyWithToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositedCurrenciesMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIsWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "BuyWithToken(uint256,uint256,address,address)": EventFragment;
    "Initialized(address[],address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveWhiteListedToken(address)": EventFragment;
    "UpdateNftProxy(address,address)": EventFragment;
    "UpdatePrice(uint256,uint256)": EventFragment;
    "WhiteListTokens(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyWithToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveWhiteListedToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateNftProxy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatePrice"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhiteListTokens"): EventFragment;
}

export interface BuyWithTokenEventObject {
  tokenId: BigNumber;
  PRICE: BigNumber;
  receiver: string;
  buyer: string;
}
export type BuyWithTokenEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  BuyWithTokenEventObject
>;

export type BuyWithTokenEventFilter = TypedEventFilter<BuyWithTokenEvent>;

export interface InitializedEventObject {
  currencies: string[];
  owner: string;
  nft: string;
}
export type InitializedEvent = TypedEvent<
  [string[], string, string],
  InitializedEventObject
>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RemoveWhiteListedTokenEventObject {
  token: string;
}
export type RemoveWhiteListedTokenEvent = TypedEvent<
  [string],
  RemoveWhiteListedTokenEventObject
>;

export type RemoveWhiteListedTokenEventFilter =
  TypedEventFilter<RemoveWhiteListedTokenEvent>;

export interface UpdateNftProxyEventObject {
  oldProxy: string;
  newProxy: string;
}
export type UpdateNftProxyEvent = TypedEvent<
  [string, string],
  UpdateNftProxyEventObject
>;

export type UpdateNftProxyEventFilter = TypedEventFilter<UpdateNftProxyEvent>;

export interface UpdatePriceEventObject {
  oldPrice: BigNumber;
  newPrice: BigNumber;
}
export type UpdatePriceEvent = TypedEvent<
  [BigNumber, BigNumber],
  UpdatePriceEventObject
>;

export type UpdatePriceEventFilter = TypedEventFilter<UpdatePriceEvent>;

export interface WhiteListTokensEventObject {
  token: string[];
}
export type WhiteListTokensEvent = TypedEvent<
  [string[]],
  WhiteListTokensEventObject
>;

export type WhiteListTokensEventFilter = TypedEventFilter<WhiteListTokensEvent>;

export interface NftSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NftSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    buyWithToken(
      _tokenAddress: string,
      receiverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    depositedCurrenciesMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getDepositedCurrencies(overrides?: CallOverrides): Promise<[string[]]>;

    getSupportedCurrencies(overrides?: CallOverrides): Promise<[string[]]>;

    initialize(
      currencies: string[],
      owner: string,
      _nft: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    nftPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeWhitelistedToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokenIsWhitelisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updatePrice(
      _nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeContract(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    whitelistTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdraw(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  buyWithToken(
    _tokenAddress: string,
    receiverAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositedCurrencies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  depositedCurrenciesMap(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getDepositedCurrencies(overrides?: CallOverrides): Promise<string[]>;

  getSupportedCurrencies(overrides?: CallOverrides): Promise<string[]>;

  initialize(
    currencies: string[],
    owner: string,
    _nft: string,
    _price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeWhitelistedToken(
    _token: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportedCurrencies(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  tokenIsWhitelisted(
    _token: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updatePrice(
    _nftPrice: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeContract(
    _newContract: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  whitelistTokens(
    _tokens: string[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdraw(
    _account: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    buyWithToken(
      _tokenAddress: string,
      receiverAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    depositedCurrenciesMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getDepositedCurrencies(overrides?: CallOverrides): Promise<string[]>;

    getSupportedCurrencies(overrides?: CallOverrides): Promise<string[]>;

    initialize(
      currencies: string[],
      owner: string,
      _nft: string,
      _price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeWhitelistedToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    supportedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    tokenIsWhitelisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePrice(
      _nftPrice: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeContract(
      _newContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistTokens(
      _tokens: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_account: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "BuyWithToken(uint256,uint256,address,address)"(
      tokenId?: BigNumberish | null,
      PRICE?: BigNumberish | null,
      receiver?: string | null,
      buyer?: null
    ): BuyWithTokenEventFilter;
    BuyWithToken(
      tokenId?: BigNumberish | null,
      PRICE?: BigNumberish | null,
      receiver?: string | null,
      buyer?: null
    ): BuyWithTokenEventFilter;

    "Initialized(address[],address,address)"(
      currencies?: string[] | null,
      owner?: string | null,
      nft?: string | null
    ): InitializedEventFilter;
    Initialized(
      currencies?: string[] | null,
      owner?: string | null,
      nft?: string | null
    ): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RemoveWhiteListedToken(address)"(
      token?: string | null
    ): RemoveWhiteListedTokenEventFilter;
    RemoveWhiteListedToken(
      token?: string | null
    ): RemoveWhiteListedTokenEventFilter;

    "UpdateNftProxy(address,address)"(
      oldProxy?: string | null,
      newProxy?: string | null
    ): UpdateNftProxyEventFilter;
    UpdateNftProxy(
      oldProxy?: string | null,
      newProxy?: string | null
    ): UpdateNftProxyEventFilter;

    "UpdatePrice(uint256,uint256)"(
      oldPrice?: BigNumberish | null,
      newPrice?: BigNumberish | null
    ): UpdatePriceEventFilter;
    UpdatePrice(
      oldPrice?: BigNumberish | null,
      newPrice?: BigNumberish | null
    ): UpdatePriceEventFilter;

    "WhiteListTokens(address[])"(
      token?: string[] | null
    ): WhiteListTokensEventFilter;
    WhiteListTokens(token?: string[] | null): WhiteListTokensEventFilter;
  };

  estimateGas: {
    buyWithToken(
      _tokenAddress: string,
      receiverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositedCurrenciesMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositedCurrencies(overrides?: CallOverrides): Promise<BigNumber>;

    getSupportedCurrencies(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      currencies: string[],
      owner: string,
      _nft: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftPrice(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeWhitelistedToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenIsWhitelisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updatePrice(
      _nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeContract(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    whitelistTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdraw(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    buyWithToken(
      _tokenAddress: string,
      receiverAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositedCurrenciesMap(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositedCurrencies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSupportedCurrencies(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      currencies: string[],
      owner: string,
      _nft: string,
      _price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeWhitelistedToken(
      _token: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportedCurrencies(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenIsWhitelisted(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updatePrice(
      _nftPrice: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeContract(
      _newContract: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    whitelistTokens(
      _tokens: string[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdraw(
      _account: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
